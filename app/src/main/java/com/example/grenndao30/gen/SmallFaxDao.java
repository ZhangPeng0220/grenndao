package com.example.grenndao30.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.example.grenndao30.SmallFax;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SMALL_FAX".
*/
public class SmallFaxDao extends AbstractDao<SmallFax, String> {

    public static final String TABLENAME = "SMALL_FAX";

    /**
     * Properties of entity SmallFax.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property MsgId = new Property(0, String.class, "msgId", true, "MSG_ID");
        public final static Property Str = new Property(1, String.class, "str", false, "STR");
        public final static Property Temp = new Property(2, byte[].class, "temp", false, "TEMP");
    }


    public SmallFaxDao(DaoConfig config) {
        super(config);
    }
    
    public SmallFaxDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SMALL_FAX\" (" + //
                "\"MSG_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: msgId
                "\"STR\" TEXT," + // 1: str
                "\"TEMP\" BLOB);"); // 2: temp
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SMALL_FAX\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SmallFax entity) {
        stmt.clearBindings();
 
        String msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindString(1, msgId);
        }
 
        String str = entity.getStr();
        if (str != null) {
            stmt.bindString(2, str);
        }
 
        byte[] temp = entity.getTemp();
        if (temp != null) {
            stmt.bindBlob(3, temp);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SmallFax entity) {
        stmt.clearBindings();
 
        String msgId = entity.getMsgId();
        if (msgId != null) {
            stmt.bindString(1, msgId);
        }
 
        String str = entity.getStr();
        if (str != null) {
            stmt.bindString(2, str);
        }
 
        byte[] temp = entity.getTemp();
        if (temp != null) {
            stmt.bindBlob(3, temp);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public SmallFax readEntity(Cursor cursor, int offset) {
        SmallFax entity = new SmallFax( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // msgId
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // str
            cursor.isNull(offset + 2) ? null : cursor.getBlob(offset + 2) // temp
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SmallFax entity, int offset) {
        entity.setMsgId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setStr(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTemp(cursor.isNull(offset + 2) ? null : cursor.getBlob(offset + 2));
     }
    
    @Override
    protected final String updateKeyAfterInsert(SmallFax entity, long rowId) {
        return entity.getMsgId();
    }
    
    @Override
    public String getKey(SmallFax entity) {
        if(entity != null) {
            return entity.getMsgId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SmallFax entity) {
        return entity.getMsgId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
